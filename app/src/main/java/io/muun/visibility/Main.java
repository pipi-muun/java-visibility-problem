/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package io.muun.visibility;

public class Main {
    public static void main(String[] args) throws InterruptedException {
        final StateWrapper stateWrapper = new StateWrapper(new Object());
        stateWrapper.start();
        // this is just to avoid reordering of the next instruction
        Thread.sleep(100);
        stateWrapper.state = StateWrapper.SENTINEL;
        // this will never return
        stateWrapper.join();
        System.out.println("Completed: " + stateWrapper.counter);
    }

    public static class StateWrapper extends Thread {

        private static final Object SENTINEL = new Object();
        /* this should be */
//        volatile
        public Object state;
        public int counter;

        public StateWrapper(Object state) {
            this.state = state;
            this.counter = 0;
        }

        public void run() {
            while (state != SENTINEL) {
                // just to do stuff
                counter++;
            }
        }
    }


}


